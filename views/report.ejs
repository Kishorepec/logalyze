<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Logalyze - Log Report</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 2rem;
      background: #f4f4f4;
    }
    h1, h2 {
      color: #333;
    }
    .section {
      background: white;
      border-radius: 8px;
      padding: 20px;
      margin-bottom: 30px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    pre {
      background: #272822;
      color: #f8f8f2;
      padding: 1rem;
      overflow-x: auto;
      border-radius: 6px;
    }
    #chat-box {
      background: #f9f9f9;
      height: 250px;
      overflow-y: auto;
      padding: 10px;
      border: 1px solid #ccc;
      margin-bottom: 10px;
      font-family: monospace;
    }
    #chat-form input {
      padding: 8px;
      width: 75%;
    }
    #chat-form button {
      padding: 8px 12px;
    }
  </style>
</head>
<body>

  <h1>Logalyze</h1>

  <!-- Summary Section -->
  <div class="section">
    <h2>Summary & Insights</h2>
    <p><%= summary || "Summary not available." %></p>
  </div>

  <!-- Status Code Chart -->
  <div class="section">
    <h2>Status Code Breakdown</h2>
    <canvas id="statusChart" height="200"></canvas>
  </div>

  <!-- Raw Log Content -->
  <div class="section">
    <h2>Raw Log Content</h2>
    <pre><%= logText %></pre>
  </div>

  <!-- AI Assistant Chat -->
  <div class="section">
    <h2>Ask About This Log</h2>
    <div id="chat-box"></div>
    <form id="chat-form">
      <input type="text" id="user-query" placeholder="Ask a question..." required />
      <button type="submit">Send</button>
    </form>
  </div>

  <script>
    const statusLabels = <%- JSON.stringify(statusLabels || []) %>;
    const statusCounts = <%- JSON.stringify(statusCounts || []) %>;

    // Chart rendering
    const ctx = document.getElementById('statusChart').getContext('2d');
    new Chart(ctx, {
      type: 'pie',
      data: {
        labels: statusLabels,
        datasets: [{
          label: 'Status Code Count',
          data: statusCounts,
          backgroundColor: statusLabels.map((code) => {
            if (code.startsWith('2')) return '#198754';  // Success
            if (code.startsWith('3')) return '#0d6efd';  // Redirect
            if (code.startsWith('4')) return '#ffc107';  // Client error
            if (code.startsWith('5')) return '#dc3545';  // Server error
            return '#6c757d'; // Others
          })
        }]
      }
    });

    // Chat logic
    const chatForm = document.getElementById('chat-form');
    const chatBox = document.getElementById('chat-box');

    chatForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const query = document.getElementById('user-query').value.trim();
      if (!query) return;

      appendMessage("You", query);

      try {
        const res = await fetch('/chat', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            logId: "<%= logId %>",
            query
          })
        });

        const data = await res.json();
        appendMessage("AI", data.answer || "No response");
      } catch (err) {
        appendMessage("AI", "‚ùå Error fetching response.");
        console.error(err);
      }

      document.getElementById('user-query').value = '';
    });

    function appendMessage(sender, message) {
      const msg = document.createElement('div');
      msg.innerHTML = `<strong>${sender}:</strong> ${message}`;
      chatBox.appendChild(msg);
      chatBox.scrollTop = chatBox.scrollHeight;
    }
  </script>

</body>
</html>
